{"version":3,"file":"static/js/3073.ea8b6558.chunk.js","mappings":"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","sources":["pages/authentication/resetPassword/modules/ResetPasswordForm.tsx","pages/authentication/resetPassword/index.tsx"],"sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport { Alert, Stack, TextField } from '@mui/material';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport useAuth from '@/hooks/useAuth';\nimport useIsMountedRef from '@/hooks/useIsMountedRef';\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }: any) {\n  const { resetPassword } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('必须是有效的电子邮件').required('电子邮件是必须的')\n  });\n\n  const formik: any = useFormik({\n    initialValues: {\n      email: 'demo@163.com'\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values: any, { setErrors, setSubmitting }: any) => {\n      try {\n        await resetPassword(values.email);\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error: any) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.message });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <TextField\n            fullWidth\n            {...getFieldProps('email')}\n            type=\"email\"\n            label=\"邮箱地址\"\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            重置密码\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { Box, Button, Container, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport { SentIcon } from '@/assets/svg';\nimport Page from '@/components/Page';\nimport { title_main } from '@/config';\nimport LogoOnlyLayout from '@/layouts/LogoOnlyLayout';\nimport { PATH_AUTH } from '@/routes/paths';\n\nimport { ResetPasswordForm } from './modules';\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <RootStyle title={`重置密码${title_main}`}>\n      <LogoOnlyLayout />\n\n      <Container>\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n          {!sent ? (\n            <>\n              <Typography variant=\"h3\" paragraph>\n                忘记密码?\n              </Typography>\n              <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                请输入您的帐户关联的电子邮件地址，我们将向您发送电子邮件链接以重置密码\n              </Typography>\n\n              <ResetPasswordForm\n                onSent={() => setSent(true)}\n                onGetEmail={(value: string) => setEmail(value)}\n              />\n\n              <Button\n                fullWidth\n                size=\"large\"\n                component={RouterLink}\n                to={PATH_AUTH.login}\n                sx={{ mt: 1 }}\n              >\n                返回\n              </Button>\n            </>\n          ) : (\n            <Box sx={{ textAlign: 'center' }}>\n              <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n              <Typography variant=\"h3\" gutterBottom>\n                发送成功\n              </Typography>\n              <Typography>\n                我们已向发送了确认电子邮件&nbsp;\n                <strong>{email}</strong>\n                <br />\n                请查看您的电子邮件。\n              </Typography>\n\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                component={RouterLink}\n                to={PATH_AUTH.login}\n                sx={{ mt: 5 }}\n              >\n                Back\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"names":["ResetPasswordForm","onSent","onGetEmail","resetPassword","useAuth","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","setErrors","setSubmitting","current","console","error","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","Stack","spacing","Alert","severity","TextField","fullWidth","type","label","Boolean","helperText","LoadingButton","size","variant","loading","RootStyle","styled","Page","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","useState","setEmail","sent","setSent","title","title_main","LogoOnlyLayout","Container","Box","sx","maxWidth","mx","textAlign","mb","height","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","mt","paragraph","color"],"sourceRoot":""}